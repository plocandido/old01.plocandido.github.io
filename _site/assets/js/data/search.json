[
  
  {
    "title": "Material Design para MkDocs no WSL",
    "url": "/posts/mkdocs-no-wsl/",
    "categories": "Documentação, Tutorial",
    "tags": "documentação, WSL, Python",
    "date": "2022-02-11 14:55:00 -0300",
    





    
    "snippet": "Instalando o MkDocs no WSLIremos mostrar nesse Post como podemos instalar o Material Desing para MkDocs no WSL para criação de documentação.Requisitos:  Windows Subsystem for Linux (WSL)  Visual St...",
    "content": "Instalando o MkDocs no WSLIremos mostrar nesse Post como podemos instalar o Material Desing para MkDocs no WSL para criação de documentação.Requisitos:  Windows Subsystem for Linux (WSL)  Visual Studio Code  Python 3.10  Pip/VirtualenvWSLPrimeiramente precisamos realizar a instalação do WSL no Windows seguindo este tutorial oficial.Para acessar a arvore dos arquivos do WSL, basta abrir o Explorer do Windows e digita na barra de endereço \\\\wsl$. Senão aparecer nada, nenhuma pasta, você terá que abrir (executar) o Linux escolhido durante a instalação do WSL para só então tentar acessar os arquivos. Aqui a distribuição escolhida foi o Debian.Visual Studio CodeEstou utilizando o VSCode para realizar a programação dessa documentação. Para instalar o VSCode, bastar acessar este link e fazer o download do binário e realizar a instalação. Depois disso teremos que realizar a instalação de uma extenção para o VSCode conforme esse artigo.Python 3.10Instalação do Python.Podemos utilizar outras versões do Python, mas nesse tutorial estou utilizando a versão 3.10. Para fazer isso, primeiramente precisamos atualizar o repositório do SO conforme abaixo.$ sudo apt update &amp;&amp; sudo apt upgradePrecisamos também instalar as dependências necessárias para construir o Python 3.10 a partir do código-fonte.$ sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-devDownload do Python 3.10.$ wget https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tgzDescompactando o arquivo.$ tar -xf Python-3.10.*.tgzAcessando a pasta descompactada.$ cd Python-3.10.*/Executando o comando configure para verificar se as dependências necessárias estão disponíveis$ ./configure --enable-optimizationsCriando o Python 3.10 a partir do código-fonte conforme abaixo. Lembre-se de acelerar o processo usando o sinalizador -j. Isso especifica o número de núcleos em seu sistema. O comando nproc mostra os núcleos do seu sistema.$ make -j 4Quando o make estiver concluído, prossiga e instale o Python 3.10 no linux conforme abaixo. O sinalizador altinstall é usado para manter o caminho binário padrão do Python em /usr/bin/python.$ sudo make altinstallPip/VirtualenvA instalação do PIP e feita utilizando o comando abaixo:$ sudo apt install python3-pipInstalando o Virtualenv$ sudo pip3 install virtualenvConfiguração do ambientePrecisamos criar uma pasta para nosso projeto:$ mkdir docinfratiAcessando a pasta criada.$ cd docinfratiVamos abrir o VSCode nessa pasta com o comando:$ code .Vamos agora definir o Python padrão para o WSL.Descobrindo onde o Python 3.10 está instalado$ which python3.10Alterando o python padrão do WSL para o Python 3.10:$ sudo ln -sf /usr/local/bin/python3.10 /usr/bin/pythonEstando dentro da pasta do projeto, precisamos criar o ambiente virtual:$ python -m venv .venvFeito a criação do ambiente vamos ativa-lo:$ source .venv/bin/activateSempre quando terminar-mos de fazer as alterações é importante que seja desativado o ambiente utilizando com o comando abaixo:$ deactivateCom o ambiente ativado, e com o VSCode aberto, vamos criar a pasta da aplicação chamada docinfra. Dentro desta pasta vamos realizar a instalação dos pacotes utilizando o comando pip, para isso teremos que criar um arquivo com os pacotes que serão utilizados. Copie o código abaixo e salve em um arquivo chamado requirements.txt.astroid==2.9.3click==8.0.4future==0.18.2ghp-import==2.0.2importlib-metadata==4.11.1isort==5.10.1Jinja2==3.0.3joblib==1.1.0lazy-object-proxy==1.7.1livereload==2.6.3lunr==0.6.1Markdown==3.3.6MarkupSafe==2.1.0mccabe==0.6.1mergedeep==1.3.4mkdocs==1.2.3mkdocs-material==8.2.1mkdocs-material-extensions==1.0.3nltk==3.7packaging==21.3platformdirs==2.5.1Pygments==2.11.2pylint==2.12.2pymdown-extensions==9.2pyparsing==3.0.7python-dateutil==2.8.2PyYAML==6.0pyyaml_env_tag==0.1regex==2022.1.18six==1.16.0toml==0.10.2tornado==6.1tqdm==4.62.3typed-ast==1.5.2watchdog==2.1.6wrapt==1.13.3zipp==3.7.0Se deixar só o nome do pacote, o PIP irá instalar os mais recentes disponível. Para realizar a instalação use o comando abaixo:$ pip install -r requirements.txtAinda dentro da pasta da Aplicação vamos criar um arquivos mkdocs.yml com as configurações do projeto.site_name: INFRAESTRUTURA DE TIsite_url: http://127.0.0.1:8000/docinfra/site_description: Documentation the IT Infrastructure site_author: Pedro Luiz de Oliveira Cândidonav:    - HOME: index.md    - INFRAESTRUTURA:      - Sede: se/networks.md      - Rio Branco: rb/networks.md      - Zona Norte: zn/networks.md      - Caicó: cai/networks.md      - Mossoró: mos/networks.md    - SERVIDORES:       - Sede: se/server.md      - Rio Branco: rb/server.md      - Zona Norte: zn/server.md      - Caicó: cai/server.md      - Mossoró: mos/server.md    - SUPORTE: se/support.md    - SISTEMAS: se/system.md    - BACKUPS: se/backups.md    - STORAGES: se/storage.md    - FIREWALL: se/firewall.md    - POLITICAS: se/policy.md    - SEGURANÇA: se/security.md    - ANTIVIRUS: se/antivirus.md    - MONITORAMENTO: se/monitoring.md    - SCRIPTS: se/scripts.md    - FERRAMENTAS: se/tools.md    - SOFTWARE HOMOLOGADOS: se/approved-programs.md    - OUTSOURCING: se/outsourcing.md       - BASE DE CONHECIMENTO: se/knowledge.mdtheme:    language: pt    name: material    logo: img/network_icon.svg    favicon: img/network_icon.svg    palette:      primary: deep orange      accent: teal      scheme: default    features:    - navigation.indexes    - search.highlight    # - navigation.tabs        # - navigation.instant    font:      text: Roboto      code: Roboto Monomarkdown_extensions:  - pymdownx.details  - pymdownx.emoji:      emoji_index: !!python/name:materialx.emoji.twemoji      emoji_generator: !!python/name:materialx.emoji.to_svg  - pymdownx.inlinehilite  - pymdownx.magiclink  - pymdownx.mark  - pymdownx.smartsymbols  - pymdownx.superfences  - pymdownx.keys  - pymdownx.betterem  - pymdownx.critic  - pymdownx.caret  - pymdownx.tilde  - pymdownx.tasklist:      custom_checkbox: true  - pymdownx.tabbed  - pymdownx.tilde  - admonition  - codehilite:      guess_lang: false  - toc:      permalink: trueplugins:  - search:      lang:        - en        - pt#   - macrosextra:  disqus: \"\"  social:    - icon: fontawesome/brands/github-alt      link: https://github.com/plocandido    - icon: fontawesome/brands/twitter      link: https://twitter.com/plo_candido    - icon: fontawesome/brands/linkedin      link: https://www.linkedin.com/in/plocandido/    - icon: fontawesome/brands/facebook      link: https://www.facebook.com/plo.candido    - icon: fontawesome/solid/paper-plane      link: mailto:plo.candido@outlook.comAlém disse teremos que criar uma pasta docs que será onde iremos colocar os arquivos markdown, imagens e etc, da documentação. Para uma melhor organização criei algumas subpastas para cada unidade da instituição.No arquivo mkdocs.yml no campo nav está listado todos os arquivos da documentação, esses arquivos precisam está criados no diretorio docs, para isso vamos criar os arquivos com extenções .md, aqui podemos criar quantos arquivos forem necessário, cada arquivo desse, será uma pagina da documentação com o conteúdo correspondente, o nome do arquivo não importa desde que estejam no diretorio docs e listados no campo nav. Nesse mesmo diretório vamos criar uma outra pasta img para adicionar as imagens dos documentos, logo, favicon e etc.Agora estando dentro da pasta Aplicação, vamos executar o MkDocs:$ mkdocs serveNossa estrutura da documentação ficou conforme imagem abaixo:Pronto, agora é só escrever e fazer as alterações da documentação utiliando markdown e ir salvando que o servidor do mkdocs irar executar e atualizar automaticamente no navegador. Neste site tem varios exemplos de como podemos formatar os arquivos markdown. Depois de feita as alterações, vamos buildar o projeto para ser gerado os arquivos do site:$ mkdocs buildCom esse comando ele irá criar uma pasta chamada site, é essa pasta que estará todo o projeto criado, quando fomos enviar os arquivos para o servidor da documentação, será os arquivos dessa pasta apenas.Se caso preferir segue o Link do repositorio desse projeto no GitHub.Fonte: Windows Subsystem for Linux (WSL), Visual Studio Code, Python 3.10, Material for MkDocs.Fico a disposição para qualquer dúvida ou sugestão."
  }
  
]

